/**
 * RAG Engine - Usage Examples
 * 
 * Este archivo muestra c√≥mo usar el RAG Engine directamente
 * en tu c√≥digo si deseas integrarlo en otras partes de la extensi√≥n
 */

// ============================================
// Ejemplo 1: Uso b√°sico - Chat con p√°gina actual
// ============================================

async function example1_BasicPageChat() {
  console.log('üìö Ejemplo 1: Chat b√°sico con p√°gina');
  
  // 1. Obtener instancia del RAG
  const rag = RAGEngine.getInstance();
  
  // 2. Extraer contenido de la p√°gina
  const pageContent = WebChatModule.extractPageContent();
  const metadata = WebChatModule.getPageMetadata();
  
  console.log('üìÑ P√°gina:', metadata.title);
  console.log('üìè Caracteres:', pageContent.length);
  
  // 3. Indexar la p√°gina
  await rag.indexPage(pageContent, metadata);
  console.log('‚úÖ P√°gina indexada');
  
  // 4. Hacer una pregunta
  const question = '¬øCu√°les son los puntos principales de esta p√°gina?';
  const chunks = rag.retrieve(question, 5);
  
  console.log(`üîç Encontrados ${chunks.length} chunks relevantes`);
  chunks.forEach((chunk, i) => {
    console.log(`\nChunk ${i + 1}:`);
    console.log('Similitud:', chunk.similarity.toFixed(3));
    console.log('Preview:', chunk.text.substring(0, 100) + '...');
  });
  
  // 5. Construir contexto
  const context = rag.buildContext(chunks);
  
  // 6. Enviar a la IA
  const prompt = `${context}\n\nPregunta del usuario: ${question}`;
  const answer = await AIModule.aiPrompt(prompt);
  
  console.log('üí¨ Respuesta:', answer);
  
  return answer;
}

// ============================================
// Ejemplo 2: Chat con enlaces relacionados
// ============================================

async function example2_ChatWithLinks() {
  console.log('üìö Ejemplo 2: Chat con enlaces');
  
  const rag = RAGEngine.getInstance();
  
  // 1. Indexar p√°gina actual
  const pageContent = WebChatModule.extractPageContent();
  const metadata = WebChatModule.getPageMetadata();
  await rag.indexPage(pageContent, metadata);
  
  // 2. Obtener enlaces de la p√°gina
  const links = WebChatModule.extractPageLinks();
  console.log(`üîó Encontrados ${links.length} enlaces internos`);
  
  // 3. Pregunta que requiere navegar
  const question = '¬øCu√°les son los precios de sus servicios?';
  
  // 4. Indexar enlaces relevantes
  await rag.indexLinks(links, question, 5);
  console.log('‚úÖ Enlaces relevantes indexados');
  
  // 5. Buscar en todo el contenido indexado
  const chunks = rag.retrieve(question, 8);
  
  // Ver de d√≥nde vienen los chunks
  console.log('üìä Distribuci√≥n de chunks:');
  const distribution = {};
  chunks.forEach(chunk => {
    const source = chunk.metadata.source;
    distribution[source] = (distribution[source] || 0) + 1;
  });
  console.log(distribution);
  
  // 6. Generar respuesta
  const context = rag.buildContext(chunks);
  const prompt = `${context}\n\nPregunta: ${question}`;
  const answer = await AIModule.aiPrompt(prompt);
  
  console.log('üí¨ Respuesta:', answer);
  
  return answer;
}

// ============================================
// Ejemplo 3: An√°lisis de URL Scoring
// ============================================

function example3_URLScoring() {
  console.log('üìö Ejemplo 3: URL Scoring');
  
  const scorer = new RAGEngine.URLScorer();
  
  // URLs de ejemplo
  const urls = [
    'https://example.com/',
    'https://example.com/about',
    'https://example.com/contact',
    'https://example.com/pricing',
    'https://example.com/blog/article-1',
    'https://example.com/services',
    'https://example.com/products/category/item'
  ];
  
  // Diferentes preguntas
  const questions = [
    '¬øC√≥mo puedo contactar a la empresa?',
    '¬øCu√°nto cuestan los servicios?',
    '¬øQu√© hace la empresa?',
    '¬øTienen art√≠culos sobre marketing?'
  ];
  
  questions.forEach(question => {
    console.log(`\n‚ùì Pregunta: "${question}"`);
    const rankedURLs = scorer.rankURLs(urls, question, 3);
    console.log('üèÜ Top 3 URLs m√°s relevantes:');
    rankedURLs.forEach((url, i) => {
      console.log(`${i + 1}. ${url}`);
    });
  });
}

// ============================================
// Ejemplo 4: Vectorizaci√≥n y Similitud
// ============================================

function example4_Vectorization() {
  console.log('üìö Ejemplo 4: Vectorizaci√≥n');
  
  const vectorizer = new RAGEngine.SimpleVectorizer();
  
  // Documentos de ejemplo
  const docs = [
    'Los gatos son animales dom√©sticos muy populares',
    'Los perros son los mejores amigos del hombre',
    'Las aves pueden volar por el cielo',
    'Los peces viven en el agua'
  ];
  
  // Tokenizar
  const allTokens = docs.map(doc => vectorizer.tokenize(doc));
  console.log('üî§ Tokens por documento:');
  allTokens.forEach((tokens, i) => {
    console.log(`Doc ${i + 1}:`, tokens);
  });
  
  // Calcular IDF
  vectorizer.computeIDF(allTokens);
  console.log('\nüìä IDF scores (algunos ejemplos):');
  const idfEntries = Array.from(vectorizer.idf.entries()).slice(0, 5);
  idfEntries.forEach(([term, idf]) => {
    console.log(`"${term}": ${idf.toFixed(3)}`);
  });
  
  // Vectorizar documentos
  const vectors = allTokens.map((tokens, i) => {
    const tf = vectorizer.computeTF(tokens);
    return vectorizer.vectorize(tokens, tf);
  });
  
  // Query
  const query = 'animales que vuelan';
  const queryTokens = vectorizer.tokenize(query);
  const queryTF = vectorizer.computeTF(queryTokens);
  const queryVector = vectorizer.vectorize(queryTokens, queryTF);
  
  console.log(`\nüîç Query: "${query}"`);
  console.log('üéØ Similitudes:');
  vectors.forEach((vec, i) => {
    const similarity = vectorizer.cosineSimilarity(queryVector, vec);
    console.log(`Doc ${i + 1}: ${similarity.toFixed(3)} - "${docs[i]}"`);
  });
}

// ============================================
// Ejemplo 5: Chunking con Overlap
// ============================================

function example5_Chunking() {
  console.log('üìö Ejemplo 5: Chunking');
  
  const chunker = new RAGEngine.ChunkCreator(50, 10); // Chunks peque√±os para demo
  
  const longText = `
    La inteligencia artificial es una rama de la ciencia de la computaci√≥n.
    Se enfoca en crear sistemas que puedan realizar tareas que normalmente requieren inteligencia humana.
    Estas tareas incluyen el reconocimiento de voz, la toma de decisiones y la traducci√≥n de idiomas.
    El aprendizaje autom√°tico es un subcampo de la IA.
    Utiliza algoritmos para permitir que las computadoras aprendan de los datos.
    Las redes neuronales son un tipo de algoritmo de aprendizaje autom√°tico.
    Est√°n inspiradas en la estructura del cerebro humano.
    El deep learning es una t√©cnica que utiliza redes neuronales profundas.
    Ha revolucionado campos como el reconocimiento de im√°genes y el procesamiento del lenguaje natural.
    Los modelos de lenguaje grandes como GPT han demostrado capacidades impresionantes.
  `.trim().replace(/\s+/g, ' ');
  
  const chunks = chunker.createChunks(longText, {
    source: 'ejemplo',
    title: 'Introducci√≥n a la IA'
  });
  
  console.log(`üì¶ Se crearon ${chunks.length} chunks`);
  chunks.forEach((chunk, i) => {
    console.log(`\n--- Chunk ${i + 1} ---`);
    console.log('Palabras:', chunk.wordCount);
    console.log('Texto:', chunk.text);
    console.log('Metadata:', chunk.metadata);
  });
  
  // Mostrar overlap
  if (chunks.length > 1) {
    console.log('\nüîÑ Overlap entre chunks:');
    for (let i = 0; i < chunks.length - 1; i++) {
      const chunk1Words = chunks[i].text.split(/\s+/);
      const chunk2Words = chunks[i + 1].text.split(/\s+/);
      
      const lastWords = chunk1Words.slice(-10).join(' ');
      const firstWords = chunk2Words.slice(0, 10).join(' ');
      
      console.log(`Chunk ${i + 1} ‚Üí ${i + 2}:`);
      console.log('Final:', lastWords);
      console.log('Inicio:', firstWords);
    }
  }
}

// ============================================
// Ejemplo 6: Uso completo en WebChatModule
// ============================================

async function example6_WebChatIntegration() {
  console.log('üìö Ejemplo 6: Integraci√≥n completa');
  
  // Este es el flujo que se usa en WebChatModule.chatWithPage()
  
  const question = '¬øDe qu√© trata esta p√°gina?';
  
  // Progress callback
  const onProgress = (msg) => console.log('‚è≥', msg);
  
  try {
    // 1. Inicializar RAG
    onProgress('Inicializando RAG...');
    await WebChatModule.initializeRAG(onProgress);
    
    // 2. Indexar enlaces relevantes
    onProgress('Buscando contenido relevante...');
    await WebChatModule.indexRelevantLinks(question, onProgress);
    
    // 3. Usar chatWithPage que internamente usa el RAG
    onProgress('Generando respuesta...');
    const answer = await WebChatModule.chatWithPage(question, onProgress);
    
    console.log('‚úÖ Respuesta:', answer);
    
    return answer;
  } catch (error) {
    console.error('‚ùå Error:', error);
  }
}

// ============================================
// Exportar ejemplos
// ============================================

window.RAGExamples = {
  example1_BasicPageChat,
  example2_ChatWithLinks,
  example3_URLScoring,
  example4_Vectorization,
  example5_Chunking,
  example6_WebChatIntegration
};

console.log('üìñ RAG Examples cargados. Usa:');
console.log('  - RAGExamples.example1_BasicPageChat()');
console.log('  - RAGExamples.example2_ChatWithLinks()');
console.log('  - RAGExamples.example3_URLScoring()');
console.log('  - RAGExamples.example4_Vectorization()');
console.log('  - RAGExamples.example5_Chunking()');
console.log('  - RAGExamples.example6_WebChatIntegration()');
